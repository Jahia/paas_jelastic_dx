---
type: install
version: 0.1
name: Jahia - Digital Experience Manager v7.3.1.0
logo: /images/jahia-logo-70x70.png
id: jahia-dx
description:
  short: Jahia - Digital Experience Manager v7.3.1.0
  text: Digital Experience Manager gives you an agile customizable platform that manages
    your entire digital ecosystem to innovate and deliver great customer experiences,
    foster internal collaboration and support dynamic business needs for sustainable
    growth.
baseUrl: https://github.com/Jahia/paas_jelastic_dx/raw/7.3.1.0

globals:
  dx_version: 7.3.1.0
  url_package: ${baseUrl}
  url_universal_package: https://github.com/Jahia/paas_jelastic_dx_universal/raw/dev_multiregion
  region1: ${settings.regions[0]}
  region2: ${settings.regions[1]}
  region3: ${settings.regions[2]}
  MU_REGIONS: false
  CLUSTER_TYPE: region
  db_user: jahia-db-${fn.random}
  db_pass: ${fn.password(20)}

settings:
  fields:
    - name: rootpwd
      type: string
      caption: Jahia DX root password
      vtype: text
      required: true
    - name: toolspwd
      type: string
      caption: Jahia tools password
      vtype: text
      required: true
    - name: browsingCount
      type: string
      caption: Number of DX browsing nodes
      vtype: text
      required: true
      default: 2
    - name: processingCount
      type: string
      caption: Number of DX processing nodes
      required: true
      default: 1
      inputType: hidden

    - name: mode
      type: radio-fieldset
      caption: Operating Mode
      values:
        production: production
        development: development
      default: production
      showIf:
        production:
          - name: ddogApikey
            type: string
            caption: Datadog API KEY
            required: true
            vtype: text

    - caption: DB stack
      type: list
      name: stack
      default: mariadb-dockerized
      required: true
      values:
        - value: mysql
          caption: MySQL CE
        - value: mariadb-dockerized
          caption: MariaDB

    - caption: DB topology
      type: list
      name: dbscheme
      required: true
      dependsOn:
        stack:
          mysql:
            - value: slave
              caption: Master-Slave with extra slaves
            - value: master
              caption: Master-Master with extra slaves
            - value: single
              caption: Single Group Replication
            - value: multi
              caption: Multi Group Replication

          mariadb-dockerized:
            - value: lonely
              caption: One, lonely, sad and single master
            - value: slave
              caption: Master-Slave with extra slaves
            - value: master
              caption: Master-Master with extra slaves
            - value: galera
              caption: Galera Cluster

    - type: checkbox
      name: is_proxysql
      caption: Add ProxySQL for SQL Load Balancing
      value: false

    - caption: None
      inputType: hidden
      type: list
      name: dbnodeType
      dependsOn:
        stack:
          mysql:
            - value: mysql
          mariadb-dockerized:
            - value: mariadb-dockerized

    - caption: None
      inputType: hidden
      type: list
      name: dbnodes
      dependsOn:
        dbscheme:
          lonely:
            - value: 1
          slave:
            - value: 2
          master:
            - value: 2
          single:
            - value: 3
          multi:
            - value: 3
          galera:
            - value: 3


    - name: regions
      type: regionlist
      caption: Region(s)
      multiSelect: true
      selectFirstAvailable: true
      min: 1
      max: 3
    - name: shortdomain
      type: envname
      caption: Environment
      required: true
    - name: displayname
      type: string
      caption: Display Name
      default: Jahia - Digital Experience Manager v7.3.1.0
      required: true

onInstall:
  - settingEnvs: ${settings.shortdomain}

  - if (!${globals.MU_REGIONS}):
      - install:
          jps: ${globals.url_universal_package}/dx-cluster-universal.yml
          shortdomain: ${settings.shortdomain}
          settings:
            shortdomain: ${settings.shortdomain}
            dxVersion: ${globals.dx_version}
            rootpwd: ${settings.rootpwd}
            toolspwd: ${settings.toolspwd}
            browsingCount: ${globals.browCountReg1}
            processingCount: ${globals.procCountReg1}
            mode: ${settings.mode}
            ddogApikey: ${settings.ddogApikey}
            dbnodeType: ${settings.dbnodeType}
            dbscheme: ${settings.dbscheme}
            dbnodes: ${globals.dbCountReg1}
            stack: ${settings.stack}
            is_proxysql: ${settings.is_proxysql}
            db_user: ${globals.db_user}
            db_pass: ${globals.db_pass}


  - if (${globals.MU_REGIONS}):
      - if (${response.regions.length} == 2):
        install:
          - jps: ${globals.url_universal_package}/dx-cluster-universal.yml
            shortdomain: ${globals.envName1}
            envGroups: ${response.envGroups}
            region: ${globals.region1}
            settings:
              shortdomain: ${settings.shortdomain}
              dxVersion: ${globals.dx_version}
              rootpwd: ${settings.rootpwd}
              toolspwd: ${settings.toolspwd}
              browsingCount: ${globals.browCountReg1}
              processingCount: ${globals.procCountReg1}
              mode: ${settings.mode}
              ddogApikey: ${settings.ddogApikey}
              dbnodeType: ${settings.dbnodeType}
              dbscheme: ${settings.dbscheme}
              dbnodes: ${globals.dbCountReg1}
              stack: ${settings.stack}
              is_proxysql: ${settings.is_proxysql}
              region1: ${globals.region1}
              region2: ${globals.region2}
              MU_REGIONS: ${globals.MU_REGIONS}
              CLUSTER_TYPE: ${globals.CLUSTER_TYPE}
              db_user: ${globals.db_user}
              db_pass: ${globals.db_pass}
          - jps: ${globals.url_universal_package}/dx-cluster-universal.yml
            shortdomain: ${globals.envName2}
            envGroups: ${response.envGroups}
            region: ${globals.region2}
            settings:
              shortdomain: ${settings.shortdomain}
              dxVersion: ${globals.dx_version}
              rootpwd: ${settings.rootpwd}
              toolspwd: ${settings.toolspwd}
              browsingCount: ${globals.browCountReg2}
              processingCount: ${globals.procCountReg2}
              mode: ${settings.mode}
              ddogApikey: ${settings.ddogApikey}
              dbnodeType: ${settings.dbnodeType}
              dbscheme: ${settings.dbscheme}
              dbnodes: ${globals.dbCountReg2}
              stack: ${settings.stack}
              is_proxysql: ${settings.is_proxysql}
              region1: ${globals.region1}
              region2: ${globals.region2}
              MU_REGIONS: ${globals.MU_REGIONS}
              CLUSTER_TYPE: ${globals.CLUSTER_TYPE}
              db_user: ${globals.db_user}
              db_pass: ${globals.db_pass}

actions:
  settingEnvs:
    - script: |
        return {
          result:0,
          regions:'${settings.regions}'.split(','),
          envGroups:eval('(' + MANIFEST + ')').envGroups
        };

    - setGlobals:
        region1: ${response.regions[0]}
        region2: ${response.regions[1]}
        region3: ${response.regions[2]}
        envName1: ${this}-1
        envName2: ${this}-2
        envName3: ${this}-3
        envGroups: ${envName}

    - script: |-
        regions = '${settings.regions}'.split(',')
        nbRegion = regions.length
        nbBrowsing = ${settings.browsingCount}
        nbProcessing = 1
        nbDB = ${settings.dbnodes}

        aBrow = []
        aProc = []
        aDB = []

        for (var i = 0; i < regions.length; i++) {
          browsing = Math.floor(nbBrowsing / nbRegion)
          aBrow.push(browsing)
          nbBrowsing -= browsing

          processing = Math.floor(nbProcessing / nbRegion)
          aProc.push(processing)
          nbProcessing -= processing

          DB = Math.floor(nbDB / nbRegion)
          aDB.push(DB)
          nbDB -= DB

          nbRegion -= 1
        }

        function shuffle(a) {
          for (var i = a.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                            [a[i], a[j]] = [a[j], a[i]];

          }
              return a;

        }

        return {
          result:0,
          regions:'${settings.regions}'.split(','),
          aBrow:shuffle(aBrow),
          aProc:shuffle(aProc),
          aDB:shuffle(aDB)
        }


    - log: "## AVANT LE TEST MULTIREGION"

    - if (${response.regions.length} > 1):
        setGlobals:
          MU_REGIONS: true
          CLUSTER_TYPE: multiregion
          browCountReg1: ${response.aBrow[0]}
          browCountReg2: ${response.aBrow[1]}
          browCountReg3: ${response.aBrow[2]}
          procCountReg1: ${response.aProc[0]}
          procCountReg2: ${response.aProc[1]}
          procCountReg3: ${response.aProc[2]}
          dbCountReg1: ${response.aDB[0]}
          dbCountReg2: ${response.aDB[1]}
          dbCountReg3: ${response.aDB[2]}

    - if (${response.regions.length} == 1):
        setGlobals:
          MU_REGIONS: false
          CLUSTER_TYPE: region
          browCountReg1: ${settings.browsingCount}
          procCountReg1: ${settings.processingCount}
          dbCountReg1: ${settings.dbnodes}
